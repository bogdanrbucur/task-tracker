// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Task {
  id                        Int          @id @default(autoincrement())
  title                     String
  description               String
  createdByUserId           String?
  assignedToUserId          String?
  source                    String?
  sourceLink                String?
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
  createdByUser             User?        @relation("CreatedByUser", fields: [createdByUserId], references: [id])
  assignedToUser            User?        @relation("AssignedToUser", fields: [assignedToUserId], references: [id])
  statusId                  Int          @default(1)
  status                    Status       @relation(fields: [statusId], references: [id])
  changes                   Change[]     @relation("Changes") // New relation to Change model
  comments                  Comment[]    @relation("Comments") // New relation to Comment model
  dueDate                   DateTime
  originalDueDate           DateTime
  completedOn               DateTime?
  closedOn                  DateTime?
  dueSoonReminderSent       Boolean      @default(false)
  lastOverdueReminderSentOn DateTime?
  lastReadyForReviewSentOn  DateTime?
  attachments               Attachment[]

  @@index([assignedToUserId])
  @@index([statusId])
  @@index([dueDate])
  @@index([createdAt])
  @@index([assignedToUserId, statusId])
}

model Status {
  id          Int    @id @default(autoincrement())
  name        String @unique
  displayName String
  color       String
  tasks       Task[]
}

model Change {
  id      Int      @id @default(autoincrement())
  taskId  Int // Foreign key to Task model
  task    Task     @relation("Changes", fields: [taskId], references: [id])
  time    DateTime @default(now())
  changes String // Field to store the changes as a string
  userId  String
  user    User     @relation("ChangeUser", fields: [userId], references: [id])
}

model Comment {
  id      Int      @id @default(autoincrement())
  taskId  Int // Foreign key to Task model
  task    Task     @relation("Comments", fields: [taskId], references: [id])
  userId  String // Foreign key to User model
  user    User     @relation("UserComment", fields: [userId], references: [id])
  time    DateTime @default(now())
  comment String // Field to store the comment
}

model User {
  id                   String      @id @default(cuid())
  firstName            String
  lastName             String
  position             String
  email                String      @unique
  sessions             Session[]
  isAdmin              Boolean?    @default(false)
  createdTasks         Task[]      @relation("CreatedByUser")
  assignedTasks        Task[]      @relation("AssignedToUser")
  department           Department? @relation(fields: [departmentId], references: [id])
  departmentId         Int?
  hashedPassword       String?
  comments             Comment[]   @relation("UserComment")
  changes              Change[]    @relation("ChangeUser")
  managerId            String?
  manager              User?       @relation("ManagerToUser", fields: [managerId], references: [id])
  subordinates         User[]      @relation("ManagerToUser")
  avatar               Avatar?
  status               String      @default("unverified") // unverified, confirmed, inactive
  lastWelcomeEmailSent DateTime?
  active               Boolean     @default(false)
  createdByUserId      String?
  createdByUser        User?       @relation("CreatedByUser", fields: [createdByUserId], references: [id])
  createdUsers         User[]      @relation("CreatedByUser")
}

model userStats {
  userId                                String @id @unique
  noTasksCompleted                      Int?
  noTasksReviewedClosed                 Int?
  noTasksReviewedReopened               Int?
  noTasksCreated                        Int?
  noTasksCompletedBeforeOriginalDueDate Int?
  noTasksCompletedBetweenDueDates       Int?
  noTasksCompletedAfterDueDate          Int?
  totalDaysWorkingOnTasks               Int?
  totalDaysReviewingTasks               Int?
}

model Avatar {
  id     Int    @id @default(autoincrement())
  path   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Attachment {
  id          String   @id
  taskId      Int // Foreign key to Task model
  task        Task     @relation(fields: [taskId], references: [id])
  path        String
  description String?
  time        DateTime @default(now())
  type        String
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Department {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  userId    String
}

model FailedLoginAttempt {
  id        Int      @id @default(autoincrement())
  email     String?
  ipAddress String
  timestamp DateTime @default(now())
}
